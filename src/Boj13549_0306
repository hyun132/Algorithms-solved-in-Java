import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.StringTokenizer;
public class Main {
    static int answer = 100000;
    static boolean[] visited = new boolean[100001];

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());

        ArrayDeque<Position> q = new ArrayDeque<>();
        q.offer(new Position(n, 0));

        boolean[] visited = new boolean[100001];
        visited[n] = true;
        while (!q.isEmpty()) {
            Position cur = q.poll();
            if(cur.cur == k) {
                if (cur.time >= answer) continue;
                answer = cur.time;
            }

            if (cur.cur * 2 <= 100000 && !visited[cur.cur * 2]) {
                visited[cur.cur * 2] = true;
                q.offerFirst(new Position(cur.cur * 2, cur.time));
            }
            if (cur.cur > 0 && !visited[cur.cur - 1]) {
                visited[cur.cur - 1] = true;
                q.offer(new Position(cur.cur - 1, cur.time + 1));
            }
            if (cur.cur < 100000 && !visited[cur.cur + 1]) {
                visited[cur.cur + 1] = true;
                q.offer(new Position(cur.cur + 1, cur.time + 1));
            }
        }

        System.out.println(answer);
    }

    static class Position {
        int cur;
        int time;

        public Position(int cur, int time) {
            this.cur = cur;
            this.time = time;
        }
    }
}
